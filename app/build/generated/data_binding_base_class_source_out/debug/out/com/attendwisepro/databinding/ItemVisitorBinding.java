// Generated by view binder compiler. Do not edit!
package com.attendwisepro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.attendwisepro.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemVisitorBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final TextView checkInTextView;

  @NonNull
  public final TextView checkOutTextView;

  @NonNull
  public final TextView hostTextView;

  @NonNull
  public final TextView idTextView;

  @NonNull
  public final TextView nameTextView;

  @NonNull
  public final TextView purposeTextView;

  private ItemVisitorBinding(@NonNull MaterialCardView rootView, @NonNull TextView checkInTextView,
      @NonNull TextView checkOutTextView, @NonNull TextView hostTextView,
      @NonNull TextView idTextView, @NonNull TextView nameTextView,
      @NonNull TextView purposeTextView) {
    this.rootView = rootView;
    this.checkInTextView = checkInTextView;
    this.checkOutTextView = checkOutTextView;
    this.hostTextView = hostTextView;
    this.idTextView = idTextView;
    this.nameTextView = nameTextView;
    this.purposeTextView = purposeTextView;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemVisitorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemVisitorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_visitor, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemVisitorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.checkInTextView;
      TextView checkInTextView = ViewBindings.findChildViewById(rootView, id);
      if (checkInTextView == null) {
        break missingId;
      }

      id = R.id.checkOutTextView;
      TextView checkOutTextView = ViewBindings.findChildViewById(rootView, id);
      if (checkOutTextView == null) {
        break missingId;
      }

      id = R.id.hostTextView;
      TextView hostTextView = ViewBindings.findChildViewById(rootView, id);
      if (hostTextView == null) {
        break missingId;
      }

      id = R.id.idTextView;
      TextView idTextView = ViewBindings.findChildViewById(rootView, id);
      if (idTextView == null) {
        break missingId;
      }

      id = R.id.nameTextView;
      TextView nameTextView = ViewBindings.findChildViewById(rootView, id);
      if (nameTextView == null) {
        break missingId;
      }

      id = R.id.purposeTextView;
      TextView purposeTextView = ViewBindings.findChildViewById(rootView, id);
      if (purposeTextView == null) {
        break missingId;
      }

      return new ItemVisitorBinding((MaterialCardView) rootView, checkInTextView, checkOutTextView,
          hostTextView, idTextView, nameTextView, purposeTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
